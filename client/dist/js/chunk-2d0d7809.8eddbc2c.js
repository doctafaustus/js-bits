(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0d7809"],{"76a5":function(e,t,o){"use strict";o.r(t);var s=function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("article",{staticClass:"snippet-article"},[o("h1",{staticClass:"hero-title"},[e._v("Symbols Are Your Friend Part II: Symbol.for() & Symbol.keyFor()")]),e._m(0),o("p",[e._v(' These 2 methods are known as "static" methods because they can only be called from the class itself and cannot be accessed via an instance of a class: ')]),o("pre",{directives:[{name:"highlightjs",rawName:"v-highlightjs"}]},[o("code",{staticClass:"javascript"},[e._v("\n    class myClass {\n      static greeting() {\n        console.log('Hello world!');\n      }\n    }\n\n    myClass.greeting() // Logs \"Hello world!\"\n\n    const foo = new myClass();\n    foo.greeting(); // Logs a TypeError\n  ")])]),e._m(1),o("pre",{directives:[{name:"highlightjs",rawName:"v-highlightjs"}]},[o("code",{staticClass:"javascript"},[e._v("\n    Symbol.for(key); // The key is a string that identifies the symbol\n  ")])]),e._m(2),e._m(3),o("pre",{directives:[{name:"highlightjs",rawName:"v-highlightjs"}]},[o("code",{staticClass:"javascript"},[e._v("\n    Symbol.for('abc'); // Create a new symbol w/ \"abc\" as the key\n    Symbol.for('abc'); // Retrieve existing \"abc\" symbol\n  ")])]),e._m(4),o("pre",{directives:[{name:"highlightjs",rawName:"v-highlightjs"}]},[o("code",{staticClass:"javascript"},[e._v("\n    const weaponSymbol1 = Symbol.for('knife');\n    const weaponSymbol2 = Symbol('club');\n\n    console.log(weaponSymbol1.description); // \"knife\"\n    console.log(weaponSymbol2.description); // \"club\"\n  ")])]),e._m(5),o("pre",{directives:[{name:"highlightjs",rawName:"v-highlightjs"}]},[o("code",{staticClass:"javascript"},[e._v("\n    const s1 = Symbol('abc'); // Create unique symbol\n    const s2 = Symbol.for('abc'); // No symbol with \"abc\" key so create one\n\n    s1 === s2; // false\n    s2 === Symbol.for('abc'); // true\n  ")])]),e._m(6),o("pre",{directives:[{name:"highlightjs",rawName:"v-highlightjs"}]},[o("code",{staticClass:"javascript"},[e._v("\n    const weaponSymbol = Symbol.for('sword');\n    Symbol.keyFor(weaponSymbol); // \"sword\"\n  ")])]),e._m(7),o("pre",{directives:[{name:"highlightjs",rawName:"v-highlightjs"}]},[o("code",{staticClass:"javascript"},[e._v("\n    const weaponSymbol = Symbol('sword');\n    Symbol.keyFor(weaponSymbol); // undefined\n  ")])]),e._m(8)])},a=[function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("p",[e._v(" In "),o("a",{attrs:{href:"/snippet/symbols-are-your-friend-part-i-a-gentle-introduction"}},[e._v("Part I")]),e._v(" we looked at the Symbol constructor and general use cases. In this second episode, we'll explore the 2 static Symbol methods, "),o("code",[e._v("Symbol.for()")]),e._v(" and "),o("code",[e._v("Symbol.keyFor()")]),e._v(". Don't worry, we'll finally get to the (in)famous "),o("code",[e._v("Symbol.iterator")]),e._v(" in due time. ")])},function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("p",[e._v(" With that out of the way, let's look at "),o("code",[e._v("Symbol.for()")]),e._v(". The syntax for this method is: ")])},function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("p",[e._v(" While "),o("code",[e._v("Symbol()")]),e._v(" always creates a brand new, totally unique value, "),o("code",[e._v("Symbol.for()")]),e._v(" will do one of 2 things: ")])},function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ol",[o("li",[e._v("If there is no symbol created with the given key, a new symbol is created.")]),o("li",[e._v("Otherwise the method will return the existing symbol with the provided key.")])])},function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("p",[e._v(" Although this looks similar to "),o("code",[e._v("Symbol()")]),e._v(", "),o("code",[e._v("Symbol.for()")]),e._v("'s argument functions as both the key to search for (or create) and the description: ")])},function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("p",[e._v(" This is an important distinction as "),o("code",[e._v("Symbol()")]),e._v("'s argument is only a description: ")])},function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("p",[e._v(" Moving on to "),o("code",[e._v("Symbol.keyFor()")]),e._v(", this one is more straightforward as it simply returns the key of a provided symbol as a string: ")])},function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("p",[e._v(" Note that "),o("code",[e._v("Symbol.keyFor()")]),e._v(" only looks for symbols created with a key created via "),o("code",[e._v("Symbol.for()")]),e._v(" and the descriptions you create with "),o("code",[e._v("Symbol()")]),e._v(" do not provide a searchable key: ")])},function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("p",[e._v(" So that's "),o("code",[e._v("Symbol.for()")]),e._v(" and "),o("code",[e._v("Symbol.keyFor()")]),e._v(". We'll take a look at some of Symbol's static properties in the next article. Betcha can't wait! ðŸ˜‰ ")])}],n=o("2877"),i={},r=Object(n["a"])(i,s,a,!1,null,null,null);t["default"]=r.exports}}]);
//# sourceMappingURL=chunk-2d0d7809.8eddbc2c.js.map