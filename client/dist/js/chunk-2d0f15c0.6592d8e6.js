(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0f15c0"],{"9ffc":function(e,t,o){"use strict";o.r(t);var n=function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("article",{staticClass:"snippet-article"},[o("h1",{staticClass:"hero-title"},[e._v("How JavaScript Blocks Work")]),e._m(0),e._m(1),e._m(2),o("pre",{directives:[{name:"highlightjs",rawName:"v-highlightjs"}]},[o("code",{staticClass:"javascript"},[e._v("\n    var foo = 'yo';\n    {\n      var foo = 'hey';\n    }\n\n    console.log(foo); // Logs 'hey'\n  ")])]),e._m(3),o("pre",{directives:[{name:"highlightjs",rawName:"v-highlightjs"}]},[o("code",{staticClass:"javascript"},[e._v("\n    let foo = 'yo';\n    {\n      let foo = 'hey';\n    }\n\n    console.log(foo); // Logs 'yo'\n  ")])]),o("br"),o("pre",{directives:[{name:"highlightjs",rawName:"v-highlightjs"}]},[o("code",{staticClass:"javascript"},[e._v("\n    const foo = 'yo';\n    {\n      const foo = 'hey';\n    }\n\n    console.log(foo); // Logs 'yo'\n  ")])]),e._m(4),e._m(5),o("pre",{directives:[{name:"highlightjs",rawName:"v-highlightjs"}]},[o("code",{staticClass:"javascript"},[e._v("\n    {\n      console.log('I run inside my very own block!');\n    }\n  ")])]),o("p",[e._v(" Although this looks strange (almost as if you're creating an object on the fly), it's 100% valid. Blocks are fun! ðŸ§± ")])])},s=[function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("p",[e._v(" A block in JavaScript is used to group zero or more statements with curly braces ("),o("code",[e._v("{}")]),e._v("). Remember that a statement is simply a unit of code that does something or produces some behavior. ")])},function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("p",[e._v(" Blocks are most often used with "),o("code",[e._v("while")]),e._v(", "),o("code",[e._v("if...else")]),e._v(" and "),o("code",[e._v("for")]),e._v(" statements. We've all seen this, however, there is an interesting implication when using blocks with "),o("code",[e._v("let")]),e._v(" and "),o("code",[e._v("const")]),e._v(". ")])},function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("p",[e._v("In non-strict mode, functions and "),o("code",[e._v("var")]),e._v(" variables do not have block scope:")])},function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("p",[e._v("But when using "),o("code",[e._v("let")]),e._v(" or "),o("code",[e._v("const")]),e._v(", blocks will hold the scope of each variable:")])},function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("p",[e._v(" Note that no SyntaxError is thrown in the "),o("code",[e._v("const")]),e._v(" example for a duplicate declaration. This is because the "),o("code",[e._v("foo")]),e._v(" variable inside the block is contained within its own scope and thus does not conflict with the outer scope. ")])},function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("p",[e._v(" We use blocks so much in JavaScript that sometimes it's easy to forget their concept. They often seem attached to their adjacent code such as an "),o("code",[e._v("if")]),e._v(" statement or function. But as we've seen in the example above, you can create perfectly valid code with your own isolated blocks if you want: ")])}],a=o("2877"),i={},c=Object(a["a"])(i,n,s,!1,null,null,null);t["default"]=c.exports}}]);
//# sourceMappingURL=chunk-2d0f15c0.6592d8e6.js.map