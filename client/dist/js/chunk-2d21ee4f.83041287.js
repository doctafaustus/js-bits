(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d21ee4f"],{d805:function(e,t,o){"use strict";o.r(t);var n=function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("article",{staticClass:"snippet-article"},[o("h1",{staticClass:"hero-title"},[e._v("Symbols Are Your Friend Part III: Symbol.iterator")]),e._m(0),o("p",[e._v(" When you first research what an iterator is, you'll often come across vague definitions like this: ")]),e._m(1),e._m(2),e._m(3),o("pre",{directives:[{name:"highlightjs",rawName:"v-highlightjs"}]},[o("code",{staticClass:"javascript"},[e._v("\n    const lotteryNumbers = [16, 32, 7];\n    for (const num of lotteryNumbers) {\n      console.log(num); // Logs num on each iteration\n    } \n  ")])]),e._m(4),e._m(5),o("img",{attrs:{src:"https://res.cloudinary.com/dzynqn10l/image/upload/v1602643656/JS%20Bits/symbol-proto_dofjn4.webp"}}),e._m(6),e._m(7),o("p",[e._v(" Let's pause for this quick recap: ")]),e._m(8),e._m(9),e._m(10),o("img",{staticStyle:{"max-width":"318px"},attrs:{src:"https://res.cloudinary.com/dzynqn10l/image/upload/v1602647571/JS%20Bits/chrome_aymvczzypU_txzapl.webp"}}),o("p",[e._v(" Okay... so what does this method return when we call it? ")]),o("img",{attrs:{src:"https://res.cloudinary.com/dzynqn10l/image/upload/v1602648235/JS%20Bits/chrome_Vm54JXql4J_dbd0bs.webp"}}),e._m(11),e._m(12),o("pre",{directives:[{name:"highlightjs",rawName:"v-highlightjs"}]},[o("code",{staticClass:"javascript"},[e._v("\n    const zoo = ['lion', 'fox', 'lizard', 'bat']; \n    const iterator = zoo[Symbol.iterator](); // Get zoo's iterator\n\n    iterator.next(); // Returns {value: \"lion\", done: false}\n    iterator.next(); // Returns {value: \"fox\", done: false}\n    iterator.next(); // Returns {value: \"lizard\", done: false}\n    iterator.next(); // Returns {value: \"bat\", done: false}\n    iterator.next(); // {value: undefined, done: true}\n  ")])]),e._m(13),e._m(14),e._m(15),o("pre",{directives:[{name:"highlightjs",rawName:"v-highlightjs"}]},[o("code",{staticClass:"javascript"},[e._v("\n    for (const animal of zoo) {\n      // Each iteration is internally calling next()\n      console.log(animal); \n    }\n  ")])]),e._m(16),e._m(17),e._v(" --"),o("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/iterator",target:"_blank"}},[e._v("MDN")]),e._m(18),o("pre",{directives:[{name:"highlightjs",rawName:"v-highlightjs"}]},[o("code",{staticClass:"javascript"},[e._v("\n    const zoo = ['lion', 'pizza', 'fox', 'lizard', 'donut', 'bat']; \n    zoo[Symbol.iterator] = function() {\n\n      // This must return the iteration obj w/ the iterator protocol\n      return {\n        self: zoo,\n        step: 0,\n\n        next() {\n          const current = this.self[this.step];\n          const isDone = this.step === this.self.length;\n          this.step++;\n\n          if (/pizza|donut/.test(current)) {\n            return { value: `${current}-monster`, done: isDone };\n          } else {\n            return {value: current, done: isDone };\n          }\n        }\n      }\n    };\n  ")])]),e._m(19),o("pre",{directives:[{name:"highlightjs",rawName:"v-highlightjs"}]},[o("code",{staticClass:"javascript"},[e._v("\n    for (const animal of zoo) {\n      console.log(animal);\n    }\n\n    /* Logs:\n      lion\n      pizza-monster\n      fox\n      lizard\n      donut-monster\n      bat\n    */\n  ")])]),e._m(20),e._m(21),o("pre",{directives:[{name:"highlightjs",rawName:"v-highlightjs"}]},[o("code",{staticClass:"javascript"},[e._v("\n    const albums = {\n      'Kill \\'Em All': 1983,\n      'Ride the Lightning': 1984,\n      'Master of Puppets': 1986,\n      '...And Justice for All': 1988,\n      'Metallica': 1991\n    };\n\n    for (const album of albums) {\n      console.log(album);\n    }  // ❌ TypeError: albums is not iterable\n  ")])]),o("p",[e._v(" But we can make it iterable! ")]),o("pre",{directives:[{name:"highlightjs",rawName:"v-highlightjs"}]},[o("code",{staticClass:"javascript"},[e._v("\n    const albums = {\n      'Kill \\'Em All': 1983,\n      'Ride the Lightning': 1984,\n      'Master of Puppets': 1986,\n      '...And Justice for All': 1988,\n      'Metallica': 1991,\n      [Symbol.iterator]: function() {\n        return {\n          step: 0,\n          values: Object.values(albums),\n\n          next() {\n            const isDone = this.step === this.values.length;\n            const value = this.values[this.step];\n            this.step++;\n\n            return { value, done: isDone };\n          }\n        };\n      }\n    };\n\n    for (const album of albums) {\n      console.log(album);\n    }\n\n    /* Logs:\n      1983\n      1984\n      1986\n      1988\n      1991\n    */\n  ")])]),o("p",[e._v(" Pretty cool, right? You have the flexibility to make your iterator as simple or as complex and you want. ")]),e._m(22),o("pre",{directives:[{name:"highlightjs",rawName:"v-highlightjs"}]},[o("code",{staticClass:"javascript"},[e._v("\n  for (const album in albums) {\n    console.log(album);\n  }\n\n  /* Logs:\n    Kill 'Em All\n    Ride the Lightning\n    Master of Puppets\n    ...And Justice for All\n    Metallica\n  */\n  ")])]),e._m(23),o("pre",{directives:[{name:"highlightjs",rawName:"v-highlightjs"}]},[o("code",{staticClass:"javascript"},[e._v("\n    zoo.forEach(animal => console.log(animal));\n\n    /* Logs:\n      lion\n      pizza\n      fox\n      lizard\n      donut\n      bat\n    */\n  ")])]),e._m(24)])},a=[function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("p",[e._v(" So far, our first 2 looks at Symbol have been straightforward. We already know "),o("code",[e._v("Symbol")]),e._v(" is a constructor that returns a symbol object which we already looked at, however this function also has a number of static properties including "),o("code",[e._v("Symbol.iterator")]),e._v(" which is "),o("i",[e._v("a method that returns the default iterator for an object")]),e._v(". This one property of "),o("code",[e._v("Symbol")]),e._v(" is so important and involved that it needs it's own focus... ")])},function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("p",[o("b",[e._v("Iterator")]),e._v(": Let's you iterate over a collection. ")])},function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("p",[e._v(" But what exactly does this mean? To start, let's define what an "),o("b",[e._v("iteration")]),e._v(" is: it's simply "),o("i",[e._v("a repetition of a process")]),e._v(". In JavaScript, a loop is an instruction to repeat until a certain condition is reached. Each repetition in a loop is called an "),o("b",[e._v("iteration")]),e._v(". ")])},function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("p",[e._v(" Next, let's define what "),o("b",[e._v("iterable")]),e._v(" means. To say that an object is iterable means that it "),o("b",[e._v("has the capability to have its values looped over with certain statements and expressions")]),e._v(" like "),o("code",[e._v("for...of")]),e._v(" or "),o("code",[e._v("yield*")]),e._v(": ")])},function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("p",[e._v(" These types of loops are different than your standard "),o("code",[e._v("for")]),e._v(" or "),o("code",[e._v("forEach()")]),e._v(" loops. We'll explain that more soon... ")])},function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("p",[e._v(" Iterable objects are those whose prototype includes the "),o("code",[e._v("Symbol.iterator")]),e._v(" key. Since arrays are iterable, you can see this when you inspect its prototype: ")])},function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("p",[e._v(" Other iterable objects include "),o("code",[e._v("String")]),e._v(", "),o("code",[e._v("Map")]),e._v(", "),o("code",[e._v("Set")]),e._v(". Note that "),o("code",[e._v("Object")]),e._v(" is NOT iterable by default. ")])},function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("p",[e._v(" Now for the hardest definition of "),o("b",[e._v("iterator")]),e._v(". An iterator is "),o("i",[e._v("any object that implements the "),o("b",[e._v("iterator protocol")])]),e._v(". Oh boy, what's that? 🙄 ")])},function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ul",[o("li",[o("b",[e._v("Iteration")]),e._v(": A repetition in a sequence/loop.")]),o("li",[o("b",[e._v("Iterable")]),e._v(": An object having the ability to be iterated upon.")]),o("li",[o("b",[e._v("Iterator")]),e._v(": Any object that implements the iterator protocol.")])])},function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("p",[e._v(" The "),o("b",[e._v("iterator protocol")]),e._v(" is "),o("i",[e._v("a standard way to produce a sequence of values and potentially a return value when all values have been produced")]),e._v(". This is achieved via an object having a special "),o("code",[e._v("next()")]),e._v(" method. ")])},function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("p",[e._v(" If this is a lot of understand right now that's completely expected. Stick with me! To explain this further, we know that there are some built-in iterables like "),o("code",[e._v("Array")]),e._v(". We learned that "),o("code",[e._v("Array")]),e._v(" is an iterable object because its prototype includes the "),o("code",[e._v("Symbol.iterator")]),e._v(" key. We can see that this key is actually a method: ")])},function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("p",[e._v(" Interesting! It returns an "),o("b",[e._v("iterator object")]),e._v(" that includes that special "),o("code",[e._v("next()")]),e._v(" method we mentioned above. ")])},function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("p",[e._v(" Since "),o("code",[e._v("Array")]),e._v(" is a built-in iterable, it implements the iterator protocol which is the way its values are iterated over. Let's check this out in code: ")])},function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("p",[e._v(" The object returned by the iterator's "),o("code",[e._v("next()")]),e._v(" method will have 2 properties by default: ")])},function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ol",[o("li",[o("b",[e._v("done:")]),e._v(" a boolean indicating if the iterator produced any value in the iteration.")]),o("li",[o("b",[e._v("value:")]),e._v(" the value returned by the iterator")])])},function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("p",[e._v(" This whole procedure using "),o("code",[e._v("next()")]),e._v(" and checking the return object's "),o("code",[e._v("value")]),e._v(" and "),o("code",[e._v("done")]),e._v(" properties is what's happing under the hood when you use a statement that expects iterables such as "),o("code",[e._v("for...of")]),e._v(": ")])},function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("p",[e._v(" Now if we go back to the formal description of "),o("code",[e._v("Symbol.iterator")]),e._v("'s behavior, it makes a little more sense: ")])},function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("i",[e._v("Whenever an object needs to be iterated (such as at the beginning of a for..of loop), its "),o("code",[e._v("@@iterator")]),e._v(" method is called with no arguments, and the returned iterator is used to obtain the values to be iterated.")])},function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("p",[e._v(" While this happens behind the scenes, we can manipulate "),o("code",[e._v("Symbol.iterator")]),e._v(" to create some custom functionality. Note that when we do this we must follow that iterator protocol by adding the "),o("code",[e._v("next()")]),e._v(" method that returns a object containing "),o("code",[e._v("value")]),e._v(" and "),o("code",[e._v("done")]),e._v(" properties: ")])},function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("p",[e._v(" With the code above, we wanted to add the string "),o("code",[e._v("-monster")]),e._v(' to any value in the array containing "pizza" or "donut." We used the array\'s '),o("code",[e._v("Symbol.iterator")]),e._v(" property to create a custom iterator object (following the iterator protocol) to do implement this. Now when we iterator over this object we'll see that result: ")])},function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("p",[e._v(" Now we understand that "),o("code",[e._v("Symbol.iterator")]),e._v(" is "),o("b",[e._v('a symbol (unique value / method) that defines the iteration behavior (or "iteration protocol") of an object')]),e._v(". That's what "),o("code",[e._v("Symbol.iterator")]),e._v(" is! 🎉 ")])},function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("p",[e._v(" We mentioned before that regular objects are not iterable (they have no "),o("code",[e._v("Symbol.iterator")]),e._v(" property): ")])},function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("p",[e._v(" Lastly, to tie up one loose-end, "),o("code",[e._v("for...of")]),e._v(" works differently than the other looping constructs in JavaScript. For example, "),o("code",[e._v("for...in")]),e._v(" will only loop over the enumerable properties of an object while "),o("code",[e._v("for...of")]),e._v(" will loop over any data that is iterable (implemented with the iterable protocol): ")])},function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("p",[e._v(" Furthermore, after we modified our "),o("code",[e._v("zoo")]),e._v(" array to return food monsters, a regular `forEach()` array method will continue to log the regular array values since we're not using the built-in iterator: ")])},function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("p",[e._v(" As you can see, there's a big difference between these looping methods but "),o("code",[e._v("Symbol.iterator")]),e._v(" allows for much greater control. 🎮 ")])}],r=o("2877"),i={},s=Object(r["a"])(i,n,a,!1,null,null,null);t["default"]=s.exports}}]);
//# sourceMappingURL=chunk-2d21ee4f.83041287.js.map