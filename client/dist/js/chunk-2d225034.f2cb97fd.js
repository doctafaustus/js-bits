(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d225034"],{e31a:function(e,t,s){"use strict";s.r(t);var i=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("article",{staticClass:"snippet-article"},[s("h1",{staticClass:"hero-title"},[e._v("Rest properties with object destructuring")]),s("p",[e._v("If we want clone an object but remove certain properties we can use this fancy trick:")]),s("pre",{directives:[{name:"highlightjs",rawName:"v-highlightjs"}]},[s("code",{staticClass:"javascript"},[e._v("\n    const user = {\n      firstName: 'Homer',\n      lastName: 'Simpson',\n      age: 40,\n      city: 'Springfield',\n    };\n\n    const { age, ...userWithoutAge } = user;\n  ")])]),e._m(0),s("pre",{directives:[{name:"highlightjs",rawName:"v-highlightjs"}]},[s("code",{staticClass:"javascript"},[e._v('\n    // userWithoutAge\n    { \n      firstName: "Homer",\n      lastName: "Simpson",\n      city: "Springfield"\n    }\n  ')])]),e._m(1),s("p",[e._v("This is how it works!")]),s("p",[e._v('First, let\'s look at a simpler example without the use of the "rest spreading":')]),s("pre",{directives:[{name:"highlightjs",rawName:"v-highlightjs"}]},[s("code",{staticClass:"javascript"},[e._v("\n    const { age, city } = user;\n\n    console.log(age); // 40\n    console.log(city); // Springfield\n  ")])]),e._m(2),s("pre",{directives:[{name:"highlightjs",rawName:"v-highlightjs"}]},[s("code",{staticClass:"javascript"},[e._v("\n    const { age, ...userWithoutAge } = user;\n  ")])]),e._m(3),s("p",[e._v(" Using rest properties for object destructuring assignment is a newer feature added in ECMAScript 2018 and is available in modern browsers. ")]),s("h3",[e._v("Links")]),s("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax",target:"_blank"}},[e._v("MDN Article on spread syntax")])])},r=[function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("Let's see what's inside "),s("code",[e._v("userWithoutAge")]),e._v(":")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("So we have a clone of the original object, but without the "),s("code",[e._v("age")]),e._v(" property. Umm, what? ðŸ¤”")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v(" Here, we're simply destructuring the object to retrieve the "),s("code",[e._v("age")]),e._v(" and "),s("code",[e._v("city")]),e._v(" properties as new variables. Cool, so let's see what happens when we look at the original example: ")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v(" First, we destructure the "),s("code",[e._v("age")]),e._v(" property as we just saw, but also we utilize "),s("b",[e._v("object rest spreading")]),e._v(" to collect the leftover properties into a variable we can name anything; in this case we call it "),s("code",[e._v("userWithoutAge")]),e._v(". This object we just created on the fly now contains all the original "),s("code",[e._v("user")]),e._v(" properties except the age! ")])}],a=s("2877"),n={},o=Object(a["a"])(n,i,r,!1,null,null,null);t["default"]=o.exports}}]);
//# sourceMappingURL=chunk-2d225034.f2cb97fd.js.map