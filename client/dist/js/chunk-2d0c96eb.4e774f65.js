(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0c96eb"],{"58b4":function(e,t,n){"use strict";n.r(t);var a=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("article",{staticClass:"snippet-article"},[n("h1",{staticClass:"hero-title"},[e._v("What's a JavaScript Statement Label?")]),n("p",[e._v(' While perusing a list of JavaScript statement and declaration types, I noticed one I hadn\'t seen before and that was a "label." ')]),n("p",[e._v("With a label you can namespace a statement:")]),n("pre",{directives:[{name:"highlightjs",rawName:"v-highlightjs"}]},[n("code",{staticClass:"javascript"},[e._v("\n    myLabel: {\n      console.log('To be');\n      break myLabel;\n      console.log('Or not to be');\n    }\n\n    console.log('That is the question 💀');\n\n    /*\n    Logs:\n\n      To be\n      That is the question 💀\n    */\n  ")])]),e._m(0),e._m(1),n("p",[e._v(" Although they're not commonly used (in lieu of function calls), labels can be used with loops to either continue or jump out of the iteration: ")]),n("pre",{directives:[{name:"highlightjs",rawName:"v-highlightjs"}]},[n("code",{staticClass:"javascript"},[e._v('\n    const fruit = [\'🍇\', \'🍍\', \'🍎\'];\n\n    myLoop:\n    for (let i = 0; i < 3; i++) {\n\n      loopDaFruit:\n      for (let j = 0; j < fruit.length; j++) {\n        if (i === 1) break loopDaFruit;\n        console.log(i, fruit[j]);\n      }\n    }\n\n    /*\n    Logs:\n\n      0 "🍇"\n      0 "🍍"\n      0 "🍎"\n      2 "🍇"\n      2 "🍍"\n      2 "🍎"\n    */\n  ')])]),e._m(2),n("pre",{directives:[{name:"highlightjs",rawName:"v-highlightjs"}]},[n("code",{staticClass:"javascript"},[e._v('\n    const fruit = [\'🍇\', \'🍍\', \'🍎\'];\n\n    myLoop:\n    for (let i = 0; i < 3; i++) {\n\n      loopDaFruit:\n      for (let j = 0; j < fruit.length; j++) {\n        if (i === 1) continue myLoop;\n        console.log(i, fruit[j]);\n      }\n    }\n\n    /*\n    Logs:\n\n      0 "🍇"\n      0 "🍍"\n      0 "🍎"\n      2 "🍇"\n      2 "🍍"\n      2 "🍎"\n    */\n  ')])]),n("p",[e._v(" Seeing a labeled statement first the first time threw me off because it almost looked like some form of object literal syntax. Now it's clear what's really going on on, even though labeled statements are rare to see in the wild. 🦁 ")])])},o=[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v(" We use a "),n("code",[e._v("break")]),e._v(" to terminate the statement labeled "),n("code",[e._v("myLabel")]),e._v(" and thus "),n("code",[e._v("console.log('Or not to be');")]),e._v(" does not run. ")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v(" This code "),n("i",[e._v("looks")]),e._v(" like we're creating an object with a key named "),n("code",[e._v("myLabel")]),e._v(" and a value of another object but that is not it. As described in my earlier "),n("a",{attrs:{href:"/snippet/how-javascript-blocks-work",target:"_blank"}},[e._v("article")]),e._v(", blocks are a set of zero or more statements grouped by curly braces. In our example, we've created a "),n("i",[e._v("labeled block")]),e._v(". Inside the block code we are breaking out of the same block referenced by its label. ")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v(" Conversely, we can achieve the same result using the first loop's label with "),n("code",[e._v("continue")]),e._v(": ")])}],i=n("2877"),s={},l=Object(i["a"])(s,a,o,!1,null,null,null);t["default"]=l.exports}}]);
//# sourceMappingURL=chunk-2d0c96eb.4e774f65.js.map