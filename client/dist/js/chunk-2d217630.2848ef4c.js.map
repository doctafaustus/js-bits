{"version":3,"sources":["webpack:///./src/snippets/dynamic-open-graph-meta-tags-with-vuejs-and-node.vue?0492","webpack:///./src/snippets/dynamic-open-graph-meta-tags-with-vuejs-and-node.vue"],"names":["render","_vm","this","_h","$createElement","_c","_self","staticClass","_v","_m","attrs","directives","name","rawName","staticRenderFns","script","component"],"mappings":"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","file":"js/chunk-2d217630.2848ef4c.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('article',{staticClass:\"snippet-article\"},[_c('h1',{staticClass:\"hero-title\"},[_vm._v(\"Dynamic Open Graph Meta Tags with VueJS and Node\")]),_vm._m(0),_vm._m(1),_c('img',{attrs:{\"src\":\"https://res.cloudinary.com/dzynqn10l/image/upload/v1606182856/JS%20Bits/view-source_obleo7.png\"}}),_vm._m(2),_c('img',{attrs:{\"src\":\"https://res.cloudinary.com/dzynqn10l/image/upload/v1606182761/JS%20Bits/fc_og_drbooa.png\"}}),_c('p',[_vm._v(\" So the only way to dynamically generate these OG meta fields is via a server-side solution. Here's mine! \")]),_c('p',[_vm._v(\" The only thing you'll need to have upfront is a seperate JS file of an array of objects containing the OG meta information for each page. You can then map your relevant paths to this object to render the appropriate content. \")]),_c('pre',{directives:[{name:\"highlightjs\",rawName:\"v-highlightjs\"}]},[_c('code',{staticClass:\"javascript\"},[_vm._v(\"\\n    const products = [\\n      {\\n        id: 111111111,\\n        title: 'Corporate Fat Cat',\\n        ogImage: 'https://cdn.com/corporate.jpg',\\n        description: 'The fat cats in Washington don’t even look this good'\\n      },\\n      {\\n        id: 222222222,\\n        title: 'Gangsta Cat',\\n        ogImage: 'https://cdn.com/gangsta.jpg',\\n        description: 'That’s how we roll'\\n      },\\n      {\\n        id: 333333333,\\n        title: 'Mechanic Cat',\\n        ogImage: 'https://cdn.com/mechanic.jpg',\\n        description: 'I have no idea what I’m doing.'\\n      }\\n    ];\\n  \")])]),_vm._m(3),_c('pre',{directives:[{name:\"highlightjs\",rawName:\"v-highlightjs\"}]},[_vm._m(4)]),_c('p',[_vm._v(\"Then set up the middleware on all routes:\")]),_c('pre',{directives:[{name:\"highlightjs\",rawName:\"v-highlightjs\"}]},[_c('code',{staticClass:\"javascript\"},[_vm._v(\"\\n    app.use('/*', (req, res, next) => {\\n      if (/^\\\\/api\\\\//.test(req.originalUrl)) next();\\n      else if (/\\\\/item\\\\//.test(req.originalUrl)) updateMetaTags(req, res);\\n      else res.sendFile(`${__dirname}/client/dist/index.html`);\\n    });\\n  \")])]),_vm._m(5),_vm._m(6),_c('pre',{directives:[{name:\"highlightjs\",rawName:\"v-highlightjs\"}]},[_c('code',{staticClass:\"javascript\"},[_vm._v(\"\\n    async function updateMetaTags(req, res) {\\n\\n      // Get and parse products array from app src\\n      const productsSrc = `${__dirname}/client/src/products.js`;\\n      const productsText = await fs.promises.readFile(productsSrc);\\n      const productsArr = JSON.parse(productsText);\\n\\n      // Retrieve product object that includes the current URL item id\\n      const productID = (req.originalUrl.match(/\\\\d{9}/) || [])[0];\\n      const productObj = productsArr.find(prod => prod.id == productID);\\n\\n      // Update the meta tag properties in the built bundle w/ Cheerio\\n      const baseSrc = `${__dirname}/client//dist/index.html`;\\n      const baseHTML = await fs.promises.readFile(baseSrc);\\n      const $base = $(baseHTML);\\n      const $url = $base.find('meta[property=og\\\\\\\\:url]');\\n      const $title = $base.find('meta[property=og\\\\\\\\:title]');\\n      const $image = $base.find('meta[property=og\\\\\\\\:image]');\\n      const $desc = $base.find('meta[property=og\\\\\\\\:description]');\\n\\n      $url.attr('content', `https://${req.get('host')}${req.originalUrl}`);\\n      $title.attr('content', productObj.title);\\n      $image.attr('content', productObj.ogImage);\\n      $desc.attr('content', productObj.description);\\n\\n      // Send the modified HTML as the response\\n      res.send($.html($base));\\n    }\\n  \")])]),_vm._m(7),_c('p',[_vm._v(\" And there we go! The OG content is served dynamically based on the requested URL: \")]),_c('img',{attrs:{\"src\":\"https://res.cloudinary.com/dzynqn10l/image/upload/v1606184876/JS%20Bits/corporate_og_uzq3mz.png\"}})])}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\" I recently faced an interesting dilemma where I was unable to solution for using dynamic Open Graph metadata for my custom built T-shirt website, \"),_c('a',{attrs:{\"href\":\"https://www.fatcattitude.com\",\"about\":\"_blank\"}},[_vm._v(\"Fat Cattitude\")]),_vm._v(\". \")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\" Essentially, I wanted to have each product page have its own OG image and description. The problem was that VueJS is a client-side framework with most content being dynamically created via JavaScript. When the Open Graph scraper requests a page it \"),_c('b',[_vm._v(\"does not run any JavaScript\")]),_vm._v(\" - it only retrieves the content that is immediately returned from your server. You can see this content in Chrome by right clicking and choosing `View page source`: \")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\" It is this content, and only this content, that is scraped by the \"),_c('a',{attrs:{\"href\":\"https://developers.facebook.com/tools/debug\"}},[_vm._v(\"OG Debugger\")]),_vm._v(\": \")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\" First, include some default OG meta tags in the \"),_c('code',[_vm._v(\"index.html\")]),_vm._v(\" file that gets served with every request: \")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('code',{staticClass:\"html\"},[_vm._v(\"\\n    \"),_vm._v(\"\\n    <meta property=\\\"og:url\\\" content=\\\"https://www.fatcattitude.com/\\\">\\n    <meta property=\\\"og:type\\\" content=\\\"website\\\">\\n    <meta property=\\\"og:title\\\" content=\\\"Fat Cattitude\\\">\\n    <meta property=\\\"og:image\\\" content=\\\"https://cdn.com/fat-cattitude-logo.jpg\\\">\\n    <meta property=\\\"og:description\\\" content=\\\"There’s attitude and there’s CATTITUDE...\\\">\\n  \")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\" All that's going on here is that if the request is an API route, then proceed to the next step in our route processing. If the route contains \"),_c('code',[_vm._v(\"/item/\")]),_vm._v(\" then we call our \"),_c('code',[_vm._v(\"updateMetaTags\")]),_vm._v(\" function (defined below). Otherwise, just serve the normal \"),_c('code',[_vm._v(\"index.html\")]),_vm._v(\" from our \"),_c('code',[_vm._v(\"/dist\")]),_vm._v(\" directory. \")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"Here's what happens in \"),_c('code',[_vm._v(\"updateMetaTags\")]),_vm._v(\":\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\" Our products array is retrieved with the File System module and then the relevant object is parsed with a simple \"),_c('code',[_vm._v(\"Array.find()\")]),_vm._v(\". From here we use the \"),_c('a',{attrs:{\"href\":\"https://www.npmjs.com/package/cheerio\",\"target\":\"_blank\"}},[_vm._v(\"Cheerio\")]),_vm._v(\" module to update the content attributes of our existing OG meta tags. Finally, we return the modified files as the server's response. \")])}]\n\nexport { render, staticRenderFns }","import { render, staticRenderFns } from \"./dynamic-open-graph-meta-tags-with-vuejs-and-node.vue?vue&type=template&id=a01bebf2&\"\nvar script = {}\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}